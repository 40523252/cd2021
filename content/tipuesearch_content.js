var tipuesearch = {"pages": [{'title': 'About', 'text': '40523252 王彥筑 \n 倉儲： https://github.com/40523252/cd2021 \n 網站： https://40523252.github.io/cd2021/content/index.html \n Stage1分組倉儲： https://github.com/40523252/stage1-ag2 \n Stage1分組網頁： https://40623121.github.io/stage1-ag2/content/index.html \n Stage2分組倉儲： https://github.com/40523252/stage2-ag8 \n Stage2分組網頁： https://40823154.github.io/stage2-ag8/content/index.html \n \n \n', 'tags': '', 'url': 'About.html'}, {'title': '建立網站', 'text': '建立個人倉儲 \n \n 下載老師提供的  kmol2021_spring_v2.7z \n 在cmd中輸入自己的 user name  和  suer email \n 進入此 網址 \n \n \n 在cmd上面輸入 (網址的部分是自己倉儲的網址)\xa0\n git clone --recurse-submodules 網址 \n 例如： \n git clone --recuse-submodules\xa0https://github.com/40523252/cd2021.git \n \n 在網站工具列的Sittings會找到 Github pages \n 把設定設成跟以下圖片一樣建設網頁就可以取得進入網站的網址 \n \n \n \n \xa0 \n \n', 'tags': '', 'url': '建立網站.html'}, {'title': 'SSH流程', 'text': '使用SSH是為了簡化把更新的檔案推送到倉儲的流程 \n \n 1.先在cmd裡輸入sh \n \n \n 2.再按Enter 直到出現以下視窗  底下的路徑是SSH檔案所在位置 \n \n \n 3.找到SSH檔案把id_rsa.pub 放入Scite裡 \n \n \n 4.再進入github網頁 找到Setting 的\xa0 SSH and GPG keys  按下 New SSH key \n \n \n 5.在Title 打上學號 底下文字就複製剛剛放到Scite 裡的一串代碼 \n \n \n 6.到putty 在 Host Name 和 Save Sessions 輸入\xa0 github.com\xa0 \n \n 7.路徑選擇ppk鑰匙檔案 \n \n \n 8.把Start.bat 放入Scite 並進行跟改\xa0 \n \xa0 \xa0寫入 \n set GIT_HOME=%Disk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n \n \n 9.再到倉儲資料夾裡的 .git (隱藏資料夾)\xa0 選擇Config 放入Scite 進行編輯 \n \n \n \n 10.輸入 url=git@github.com:學號/倉儲名稱.git \n \xa0 \xa0 \xa0並且把上面一行註解掉 \n \n \n 11.SSH即可完成 \n', 'tags': '', 'url': 'SSH流程.html'}, {'title': '四人分組W5-W8', 'text': '\xa0 40523252 repo \xa0|\xa0 40523252 site \xa0王彥筑 \n \xa0 40823154 repo \xa0 | \xa0 40823154 site \xa0張宸嘉 \n \xa0 40823103 repo \xa0 | \xa0 40823103 site \xa0呂霈瑜 \n \xa0 40823107 repo \xa0 | \xa0 40823107 site \xa0吳嘉欣 \n', 'tags': '', 'url': '四人分組W5-W8.html'}, {'title': '分配工作', 'text': '\n \n \n 繪製零件圖 \n 40823103\xa0 呂霈瑜 \n \n \n 模擬 \n 40823107\xa0 吳嘉欣 \n \n \n 編輯小組網頁 \n 40523252\xa0 王彥筑 \n \n \n DPF製作 \n 40823154\xa0 張宸嘉 \n \n \n \n', 'tags': '', 'url': '分配工作.html'}, {'title': '討論主題', 'text': 'Pegasus Automata \n \n', 'tags': '', 'url': '討論主題.html'}, {'title': '模擬機構', 'text': 'Solidworks模擬 \n \n \n 第一次組裝時不是很熟悉 雖然看起來組裝好了沒問題\xa0 \n 但是運轉起來還是沒有成功 也卡卡的不太順 \n 沒有定義好 \n \n 第二次模擬 零件不能運轉 應該是轉速不夠 \n 也有可能是扭距不夠 \n \n \n 第三次模擬也是 後來發現齒輪們有對齊到 \n 所以重新繼續定義這些零件 \n \n \n 第四次模擬有比之前好很多 有讓齒輪互相對齊 \n 所以一開始零件可以順利運轉 但是最後還是有問題\xa0 \n 所以沒辦法順利轉動 \n \n \n', 'tags': '', 'url': '模擬機構.html'}, {'title': 'RoboDK的操作流程', 'text': '\n', 'tags': '', 'url': 'RoboDK的操作流程.html'}, {'title': 'TASK', 'text': '\n', 'tags': '', 'url': 'TASK.html'}, {'title': 'task1', 'text': 'with open("stage3_2a.txt") as a:   #開啟Stage3_2a.txt檔案 令他為a\n    data = a.readlines()  #data=讀a檔案裡的資料\n    print(data) #列出data讀到的文字\nfor i in range(len(data)):  # 將範圍(range)訂在data讀到的len(有6個)裡就不會出現list index out of range的問題 得到的元素放入i 再讓i做迴圈\n    group = data[i].rstrip("\\n").split("\\t") #讀取data的第"i"個 把\\n刪除讓他不會自動換行 在加上\\t 新增空格\n    print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/stage3-ag\'+group[0][9]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/stage3-ag\'+group[0][9]+\'">倉儲</a></p>\')\n    #列出list 中的內容再加入html的格式 和個人網址\n \n \n    for j in range(2,18,2): #對j做迴圈把範圍定在2~18 每次跳兩個\n        try:\n            print(\'<p>\'+group[j]+\'|Website:\'+\'<a href="https://\'+group[j]+\'.github.io/cd2021\'+\'">\'+group[j]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[j]+\'/cd2021\'+\'">\'+group[j]+\'</a></p>\')   #跟上面一樣列出倉儲網址\n        except:\n            continue  #繼續讓迴圈跑 \n 列出的成果如下 \n \n stage3_ag1|\xa0\xa0 網站 \xa0 \xa0 倉儲 \n 40823131|Website: 40823131 |Repository: 40823131 \n 40823112|Website: a40823112 |Repository: a40823112 \n 40823123|Website: 40823123 |Repository: 40823123 \n 40823145|Website: 40823145 |Repository: 40823145 \n 40823136|Website: 40823136 |Repository: 40823136 \n 40823109|Website: 40823109 |Repository: 40823109 \n 40823116|Website: 40823116 |Repository: 40823116 \n 40823108|Website: 40823108 |Repository: 40823108 \n stage3_ag2|\xa0\xa0 網站 \xa0 \xa0 倉儲 \n 40823151|Website: 40823151 |Repository: 40823151 \n 40623121|Website: 40623121 |Repository: 40623121 \n 40871106|Website: 40871106 |Repository: 40871106 \n 40823102|Website: 40823102 |Repository: 40823102 \n 40823104|Website: 40823104 |Repository: 40823104 \n 40823106|Website: 40823106 |Repository: 40823106 \n 40823101|Website: 40823101 |Repository: 40823101 \n 40823132|Website: 40823132 |Repository: 40823132 \n stage3_ag3|\xa0\xa0 網站 \xa0\xa0 倉儲 \n 40823119|Website: 40823119 |Repository: 40823119 \n 40823150|Website: 40823150 |Repository: 40823150 \n 40823103|Website: 40823103 |Repository: 40823103 \n 40823107|Website: 40823107 |Repository: 40823107 \n 40523252|Website: 40523252 |Repository: 40523252 \n 40823154|Website: 40823154 |Repository: 40823154 \n |Website: |Repository: \n |Website: |Repository: \n stage3_ag4\xa0\xa0 網站 \xa0\xa0 倉儲 \n 40823142|Website: 40823142 |Repository: 40823142 \n 40823144|Website: 40823144 |Repository: 40823144 \n 40823127|Website: 40823127 |Repository: 40823127 \n 40823148|Website: 40823148 |Repository: 40823148 \n 40823121|Website: 40823121 |Repository: 40823121 \n 40823135|Website: 40823135 |Repository: 40823135 \n 40823114|Website: 40823114 |Repository: 40823114 \n 40823146|Website: 40823146 |Repository: 40823146 \n stage3_ag5\xa0\xa0 網站 \xa0\xa0 倉儲 \n 40823111|Website: 40823111 |Repository: 40823111 \n 40823115|Website: 40823115 |Repository: 40823115 \n 40823128|Website: 40823128 |Repository: 40823128 \n 40823120|Website: 40823120 |Repository: 40823120 \n 40823140|Website: 40823140 |Repository: 40823140 \n 40823124|Website: 40823124 |Repository: 40823124 \n 40823139|Website: 40823139 |Repository: 40823139 \n 40823126|Website: 40823126 |Repository: 40823126 \n stage3_ag6\xa0\xa0 網站 \xa0\xa0 倉儲 \n 40823152|Website: 40823152 |Repository: 40823152 \n 40823110|Website: 40823110 |Repository: 40823110 \n 40823122|Website: 4823122 |Repository: 4823122 \n 40823125|Website: 40823125 |Repository: 40823125 \n 40823117|Website: 40823117 |Repository: 40823117 \n 40823129|Website: 40823129 |Repository: 40823129 \n 40823149|Website: 40823149 |Repository: 40823149 \n 40823153|Website: 40823153 |Repository: 40823153 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '\n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '', 'tags': '', 'url': 'task3.html'}, {'title': 'W13-W14', 'text': 'RoboDK 機械手臂 \n 1.開啟老師提供的pick_and_place檔案和 robodk程式 \n \n \n 2.進入到程式後打開資料 \n \n \n \n 3.找到pick_and_place資料夾的範例 \n \n 4.導入 \n \n 5.找到程式檔案 \n \n 6.放到小白框裡 \n \n 7.然後在這裡輸入 \n pip install robodk \n \n 8.然後再把robodk_ip 改成127.0.0.1 \n \n \n 9.完成 \n \n', 'tags': '', 'url': 'W13-W14.html'}, {'title': 'W15', 'text': "Inverse kinematics\xa0 翻譯 \n Inverse kinematics for a 2-joint robot arm using geometry \n \n We saw this simple two-link robot in the previous lecture about forward kinematics. \n \n 我們在前面看到了這個簡單的雙連桿機器人關於正向運動學的講座。 \n The tooltip pose of this robot is described simply by two numbers, the coordinates x and \n y with respect to the world coordinate frame. \n 描述了該機器人的工具提示位姿 簡單地由兩個數字，坐標 x 和 \n y 相對於世界坐標系。 \n \n So, the problem here is that given x and y, we want to determine the joined angles, Q1 \n and Q2. \n 所以，這裡的問題是，給定 x 和 y， 我們要確定連接的角度 Q1 \n 和 Q2。 \n \n The solution that we’re going to follow in this particular section is a geometric \n one. \n 我們將在本節中遵循的解決方案是幾何解決方案。 \n \n We’re going to start with a simple piece of construction. \n 我們將從一個簡單的結構開始。 \n \n We’re going to overlay the red triangle on top of our robot. \n 我們將在機器人頂部覆蓋紅色三角形。 \n We know that the end point coordinate is x, y, so the vertical height of the triangle \n is y, the horizontal width is x. \n 我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x。 \n And, using Pythagoras theorem, we can write r squared equals x squared plus y squared. \n So far, so easy. \n 並且，使用畢達哥拉斯定理，我們可以寫出 r 平方等於 x 平方加上 y 平方。 到目前為止，很容易。 \n Now, we’re going to look at this triangle highlighted here in red and we want to determine \n the angle alpha. \n 現在，我們將查看此處以紅色突出顯示的三角形，我們要確定角度 alpha。 \n In order to do that, we need to use the cosine rule. \n 為了做到這一點，我們需要使用餘弦規則。 \n And, if you’re a little rusty on the cosine rule, here is a bit of a refresher. \n 而且，如果你對余弦規則有點生疏，這裡有一點複習。 \n We have an arbitrary triangle. \n 我們有一個任意三角形。 \n We don’t have to have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a. \n 我們不必在其中有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。 \n \n And, we do the same for this edge and this angle, and this edge and this angle. \n 並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。 \n \n So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little \n a, little b, and little c. \n 因此，所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。 \n \n So, the cosine rule is simply this relationship here. \n 所以，餘弦規則就是這裡的這種關係。 \n \n It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it. \n 它有點像畢達哥拉斯的定理，除了末尾有 cos a 的這個額外項。 \n \n Now, let’s apply the cosine rule to the particular triangle we looked at a moment \n ago. \n 現在，讓我們將餘弦規則應用於我們剛才看到的特定三角形。 \n \n It’s pretty straightforward to write down this particular relationship. \n 寫下這種特殊關係非常簡單。 \n \n We can isolate the term cos alpha which gives us the angle alpha that we’re interested \n in. \n \n \n And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of \n the end effector, x and y. \n \n \n We can write this simple relationship between the angles alpha and Q2. \n \n \n And, we know from the shape of the cosine function that cos of Q2 must be equal to negative \n of cos alpha. \n \n \n This time, let’s just write an expression for the cosine of the joined angle Q2. \n \n \n Now, we’re going to draw yet another red triangle and we’re going apply some simple \n trigonometry here. \n \n \n If we know Q2, then we know this length and this length of the red triangle. \n \n \n We can write this relationship for the sine of the joined angle Q2. \n \n \n Now, we can consider this bigger triangle whose angle is beta and this side length of \n the triangle is given here in blue. \n \n \n And, the length of the other side of the triangle is this. \n \n \n So, now we can write an expression for the angle beta in terms of these parameters here. \n \n \n Going back to the red triangle that we drew earlier, we can establish a relationship between \n Q1 and the angle beta. \n \n \n Introduce yet another angle, this one gamma and we can write a relationship between the \n angle gamma and the tooltip coordinates x and y. \n \n \n Now, we can write a simple relationship between the angles that we’ve constructed, gamma \n and beta and the joined angle we’re interested in which is Q1. \n \n \n And, the total relationship looks something like this. \n \n \n Quite a complex relationship, it gives us the angle of joined one, that’s Q1 in terms \n of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s \n also a function of the second joint angle, Q2. \n \n \n So, let’s summarize what it is that we have derived here. \n \n \n We have an expression for the cosine of Q2 and we have an expression for Q1. \n \n \n Now, the cosine function is symmetrical about 0. \n \n \n So, if we know the value of the cosine of Q2, then there are two possible solutions, \n a positive angle and a negative angle. \n \n \n We’re going to explicitly choose the positive angle, which means that I can write this expression \n here. \n \n \n And now, we have what we call the inverse kinematic solution for this two-link robot. \n \n \n We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose \n x and y, and a bunch of constants. \n \n \n You notice that the two equations are not independent. \n \n \n The equation for Q1, in fact, depends on the solution for Q2. \n \n \n In this case, Q2 is negative and we’re going to write the solution for Q2 with a negative \n sign in front of the inverse cosine. \n \n \n Now, we need to solve for Q1, so we’re going to introduce this particular red triangle, \n \n \n the angle beta that we solved previously, \n and the angle gamma which is defined in terms \n of y and x. \n \n \n Now, we write a slightly different relationship between Q1, gamma and beta, different to what \n we had before. \n \n \n There’s a change of sign involved. \n \n \n Then, we can substitute all that previous equation and come up with this expression \n for Q1. \n \n \n Again, there is a change of sign here. \n Previously, this was a negative sign. \n \n \n And, here in summary form is the solution for the inverse kinematics of our two-link \n robot when it is in this particular configuration, where Q2 is negative. \n \n \n Let’s compare the two solutions, the case where Q2 is positive and the case where Q2 \n is negative. \n \n \n Inverse kinematics for a 2-joint robot arm using algebra \n \n Here we have the same two link robot as we just looked at but this time we're going to \n solve it using an analytical approach, that is we're going to rely much more on algebra, \n particular linear algebra rather than geometry. We have an expression E, which is the homogeneous \n transformation which represents the pose of the robots endefector and we looked at this \n in the last lecture, we can write the endefector pose as a sequence of elementary homogeneous \n transformations. A rotation by Q1, a translation along the X direction by A1, a rotation by \n Q2 and then a translation in the X direction by A2. If I expand this out, multiply all \n the transformations together, I get the expression shown here; a three by three homogeneous transformation \n matrix representing the pose of the robot's endefector. \n Now for this particular two link robot, we are only interested in the position of its \n endefector, it's X and Y co-ordinate and they are these two elements within the homogeneous \n transformation matrix, so I'm going to copy those out. So here again is our expression \n for X and Y and what we're going to do is a fairly common trick, we're going to square \n and add these two equations and I get a relationship that looks like this. Now I can solve for \n the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2. \n Now what I'm going to do is apply the sum of angles identity. I'm going to expand these \n terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm \n going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where \n ever I had sine Q2, I’m going to write S2. It's a fairly common shorthand when people \n are looking at robot kinematic equations. And here are the equations after making those \n substitutions. Looking at these two equations, I can see that they fall into a very well \n known form and for that form there is a very well known solution. So I'm going to consider \n just one of the equations, the equation for Y and using our well known identity and it's \n solution, I can determine the values for the variables little a, little b and little c \n and once I've determined those, then I can just write down the solution for Q1, which \n is the equivalent of theta in this particular case. \n Here again is our expression for Q1, copied over from the previous slide and we may remember \n from earlier in our workings that we determined this particular relationship; X squared plus \n Y squared is equal to this particular complex expression. So I can substitute that in and \n do some simplification and I end up with this slightly less complex expression for Q1. And \n it is the same expression that I got following the geometric approach in the previous section. \n \n \n \n \n \n \n \n", 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': '\n MTB_robot 的取放方塊流程規劃 (Process Planning): \n 1. Onshape 零組件繪製 (20%) \n 零組件必須在 \xa0 Onshape \xa0 繪圖, 並提供可公開分享之零組件連結於頁面及回報區中. \n 2. 建立 CoppeliaSim 4.1.0 MTB robot 場景 (20%) \n 請以自行繪製之零件輸入 CoppeliaSim 後, 組合為 MTB robot 模型, 並利用 Leo Editor 以 require 導入 Lua 程式運作, 分別控制各軸轉動示範, 所完成的所有檔案請存入 W16_exam 後壓縮為 W16_exam.7z 後送至個人 @gm 帳號下的 Google Drive 後將連結設為任何人皆可下載, 並將連結與操作嵌入影片放在 W16 頁面與回報區中 . \n 3. 手臂末端加入 components-gripper-suction pad 吸盤 (20%) \n 請接續上述 MTB robot, 在其末端接上 force sensor 後接上標準 suction pad 後, 分別導入 W15 週線上課程之鍵盤控制程式後, 拍攝影片示範 W15 線上課程中之操作與示範過程. \n 4. 逆向運動學函式 (20%) \n 請根據 W15 線上課程內容之 Inverse Kinematics 方程式 ( 影片1 \xa0 或 影片2 ), 以程式指定方塊取放之兩個位置 - (0.2, 0.7, 0.05) 與 (-0.3, -0.55, 0.05), 以前述 Leo Editor Lua 程式編寫方法, 分別採鍵盤控制與程式迴圈方式執行 W15 兩個指定位置之方塊取放. \n 5. Python remote API 逆向運動學函式 (20%) \n 請利用 Python remote API 程式重現以迴圈方式執行 W15 兩個指定位置之方塊取放.', 'tags': '', 'url': 'W16.html'}]};